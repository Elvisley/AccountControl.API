// <auto-generated />
using System;
using AC.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AC.Persistence.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20180923143257_ACAlterTransactionRevisionTransactionType")]
    partial class ACAlterTransactionRevisionTransactionType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AC.Domain.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED");

                    b.Property<bool>("Master")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MASTER")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Money")
                        .HasColumnName("MONEY")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("PersonId")
                        .HasColumnName("PERSON_ID");

                    b.Property<int>("StatusId")
                        .HasColumnName("STATUS_ID");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("StatusId");

                    b.ToTable("TB_ACCOUNTS");
                });

            modelBuilder.Entity("AC.Domain.ChildrenAccounts", b =>
                {
                    b.Property<int>("ParentAccountId")
                        .HasColumnName("PARENT_ACCOUNT_ID");

                    b.Property<int>("ChildrenAccountId")
                        .HasColumnName("CHILDREN_ACCOUNT_ID");

                    b.HasKey("ParentAccountId", "ChildrenAccountId");

                    b.HasIndex("ChildrenAccountId");

                    b.ToTable("TB_CHILDREN_ACCOUNTS");
                });

            modelBuilder.Entity("AC.Domain.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnName("DOCUMENT");

                    b.Property<string>("PERSON_TYPE")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("TB_PERSONS");

                    b.HasDiscriminator<string>("PERSON_TYPE").HasValue("PERSON_BASE");
                });

            modelBuilder.Entity("AC.Domain.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.ToTable("TB_STATUS");
                });

            modelBuilder.Entity("AC.Domain.Transactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountDestinationId")
                        .HasColumnName("ACCOUNT_DESTINATION_ID");

                    b.Property<int?>("AccountSourceId")
                        .HasColumnName("ACCOUNT_SOURCE_ID");

                    b.Property<DateTime>("Created")
                        .HasColumnName("CREATED");

                    b.Property<decimal>("Money")
                        .HasColumnName("MONEY")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("TransactionCode")
                        .IsRequired()
                        .HasColumnName("TRANSACTION_CODE")
                        .HasMaxLength(100);

                    b.Property<int>("TransactionTypeId")
                        .HasColumnName("TRANSACTION_TYPE_ID");

                    b.HasKey("Id");

                    b.HasIndex("AccountDestinationId");

                    b.HasIndex("AccountSourceId");

                    b.HasIndex("TransactionCode")
                        .IsUnique()
                        .HasName("UNIQUE_TRANSACTION_CODE");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("TB_TRANSACTIONS");
                });

            modelBuilder.Entity("AC.Domain.TransactionsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.ToTable("TB_TRANSACTION_TYPE");
                });

            modelBuilder.Entity("AC.Domain.PersonLegal", b =>
                {
                    b.HasBaseType("AC.Domain.Person");

                    b.Property<string>("FantasyName")
                        .IsRequired()
                        .HasColumnName("FANTASY_NAME");

                    b.Property<string>("SocialReason")
                        .IsRequired()
                        .HasColumnName("SOCIAL_REASON");

                    b.ToTable("PersonLegal");

                    b.HasDiscriminator().HasValue("PERSON_LEGAL");
                });

            modelBuilder.Entity("AC.Domain.PersonPhysical", b =>
                {
                    b.HasBaseType("AC.Domain.Person");

                    b.Property<DateTime>("Birth")
                        .HasColumnName("BIRTH");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnName("FULL_NAME");

                    b.ToTable("PersonPhysical");

                    b.HasDiscriminator().HasValue("PERSON_PHYSICAL");
                });

            modelBuilder.Entity("AC.Domain.Account", b =>
                {
                    b.HasOne("AC.Domain.Person", "Person")
                        .WithMany("Accounts")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AC.Domain.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AC.Domain.ChildrenAccounts", b =>
                {
                    b.HasOne("AC.Domain.Account", "ChildrenAccount")
                        .WithMany()
                        .HasForeignKey("ChildrenAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AC.Domain.Account", "ParentAccount")
                        .WithMany("ChildrenAccounts")
                        .HasForeignKey("ParentAccountId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AC.Domain.Transactions", b =>
                {
                    b.HasOne("AC.Domain.Account", "AccountDestination")
                        .WithMany()
                        .HasForeignKey("AccountDestinationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AC.Domain.Account", "AccountSource")
                        .WithMany()
                        .HasForeignKey("AccountSourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AC.Domain.TransactionsType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
